input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            Convert(source []Input) ([]Output, error)
            ConvertX(string) (string, error)
        }

        type Input struct {
            Name string
            Age int
        }
        type Output struct {
            Name string
            Age int
        }
success: |
    // Code generated by github.com/polpo-studio/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/polpo-studio/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source []execution.Input) ([]execution.Output, error) {
    	slicesOutputList := make([]execution.Output, len(source))
    	for i := 0; i < len(source); i++ {
    		slicesOutput, err := c.slicesInputToSlicesOutput(source[i])
    		if err != nil {
    			var errValue []execution.Output
    			return errValue, err
    		}
    		slicesOutputList[i] = slicesOutput
    	}
    	return slicesOutputList, nil
    }
    func (c *ConverterImpl) ConvertX(source string) (string, error) {
    	return source, nil
    }
    func (c *ConverterImpl) slicesInputToSlicesOutput(source execution.Input) (execution.Output, error) {
    	var slicesOutput execution.Output
    	xstring, err := c.ConvertX(source.Name)
    	if err != nil {
    		var errValue execution.Output
    		return errValue, err
    	}
    	slicesOutput.Name = xstring
    	slicesOutput.Age = source.Age
    	return slicesOutput, nil
    }
