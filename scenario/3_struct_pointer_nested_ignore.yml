input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            // goverter:ignore Name
            Convert(source *InputOne) *OutputOne
        }

        type InputOne struct {
            Name string
            Age int
            Nested InputTwo
        }
        type InputTwo struct {
            Name string
            Age int
        }
        type OutputOne struct {
            Age int
            Nested OutputTwo
        }
        type OutputTwo struct {
            Name string
            Age int
        }
success: |
    // Code generated by github.com/polpo-studio/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/polpo-studio/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source *execution.InputOne) *execution.OutputOne {
    	var pStructsOutputOne *execution.OutputOne
    	if source != nil {
    		structsOutputOne := c.structsInputOneToStructsOutputOne(*source)
    		pStructsOutputOne = &structsOutputOne
    	}
    	return pStructsOutputOne
    }
    func (c *ConverterImpl) structsInputOneToStructsOutputOne(source execution.InputOne) execution.OutputOne {
    	var structsOutputOne execution.OutputOne
    	structsOutputOne.Age = source.Age
    	structsOutputOne.Nested = c.structsInputTwoToStructsOutputTwo(source.Nested)
    	return structsOutputOne
    }
    func (c *ConverterImpl) structsInputTwoToStructsOutputTwo(source execution.InputTwo) execution.OutputTwo {
    	var structsOutputTwo execution.OutputTwo
    	structsOutputTwo.Name = source.Name
    	structsOutputTwo.Age = source.Age
    	return structsOutputTwo
    }
