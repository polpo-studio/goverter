input:
    input.go: |
        package structs

        // goverter:converter
        type Converter interface {
            Convert(source Input) Output
        }

        type Input struct {
            Value *InputA
        }
        type Output struct {
            Value *OutputA
        }

        type InputA struct {
            Value *InputB
        }
        type InputB struct {
            Value *InputA
        }
        type OutputA struct {
            Value *OutputB
        }
        type OutputB struct {
            Value *OutputA
        }
success: |
    // Code generated by github.com/polpo-studio/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/polpo-studio/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source execution.Input) execution.Output {
    	var structsOutput execution.Output
    	var pStructsOutputA *execution.OutputA
    	if source.Value != nil {
    		structsOutputA := c.structsInputAToStructsOutputA(*source.Value)
    		pStructsOutputA = &structsOutputA
    	}
    	structsOutput.Value = pStructsOutputA
    	return structsOutput
    }
    func (c *ConverterImpl) structsInputAToStructsOutputA(source execution.InputA) execution.OutputA {
    	var structsOutputA execution.OutputA
    	var pStructsOutputB *execution.OutputB
    	if source.Value != nil {
    		structsOutputB := c.structsInputBToStructsOutputB(*source.Value)
    		pStructsOutputB = &structsOutputB
    	}
    	structsOutputA.Value = pStructsOutputB
    	return structsOutputA
    }
    func (c *ConverterImpl) structsInputBToStructsOutputB(source execution.InputB) execution.OutputB {
    	var structsOutputB execution.OutputB
    	var pStructsOutputA *execution.OutputA
    	if source.Value != nil {
    		structsOutputA := c.structsInputAToStructsOutputA(*source.Value)
    		pStructsOutputA = &structsOutputA
    	}
    	structsOutputB.Value = pStructsOutputA
    	return structsOutputB
    }
