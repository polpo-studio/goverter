input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            Convert(source []ID) []int
            Convert2(source IDs) []int
            Convert3(source IDs) IDs
            Convert4(source []ID) IDs
            Convert5(source IIDs) IDs
            Convert6(source []int) IIDs
            Convert7(source []int) IDs
        }
        type ID int
        type IDs []int
        type IIDs []ID
success: |
    // Code generated by github.com/polpo-studio/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/polpo-studio/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) Convert(source []execution.ID) []int {
    	intList := make([]int, len(source))
    	for i := 0; i < len(source); i++ {
    		intList[i] = int(source[i])
    	}
    	return intList
    }
    func (c *ConverterImpl) Convert2(source execution.IDs) []int {
    	intList := make([]int, len(source))
    	for i := 0; i < len(source); i++ {
    		intList[i] = source[i]
    	}
    	return intList
    }
    func (c *ConverterImpl) Convert3(source execution.IDs) execution.IDs {
    	slicesIDs := make(execution.IDs, len(source))
    	for i := 0; i < len(source); i++ {
    		slicesIDs[i] = source[i]
    	}
    	return slicesIDs
    }
    func (c *ConverterImpl) Convert4(source []execution.ID) execution.IDs {
    	slicesIDs := make(execution.IDs, len(source))
    	for i := 0; i < len(source); i++ {
    		slicesIDs[i] = int(source[i])
    	}
    	return slicesIDs
    }
    func (c *ConverterImpl) Convert5(source execution.IIDs) execution.IDs {
    	slicesIDs := make(execution.IDs, len(source))
    	for i := 0; i < len(source); i++ {
    		slicesIDs[i] = int(source[i])
    	}
    	return slicesIDs
    }
    func (c *ConverterImpl) Convert6(source []int) execution.IIDs {
    	slicesIIDs := make(execution.IIDs, len(source))
    	for i := 0; i < len(source); i++ {
    		slicesIIDs[i] = execution.ID(source[i])
    	}
    	return slicesIIDs
    }
    func (c *ConverterImpl) Convert7(source []int) execution.IDs {
    	slicesIDs := make(execution.IDs, len(source))
    	for i := 0; i < len(source); i++ {
    		slicesIDs[i] = source[i]
    	}
    	return slicesIDs
    }
