input:
    input.go: |
        package slices

        // goverter:converter
        type Converter interface {
            ConvertP(source []Input) []*Output
            ConvertPToP(source []*Input) []*Output
        }

        type Input struct {
            Name string
            Age int
        }
        type Output struct {
            Name string
            Age int
        }
success: |
    // Code generated by github.com/polpo-studio/goverter, DO NOT EDIT.

    package generated

    import execution "github.com/polpo-studio/goverter/execution"

    type ConverterImpl struct{}

    func (c *ConverterImpl) ConvertP(source []execution.Input) []*execution.Output {
    	pSlicesOutputList := make([]*execution.Output, len(source))
    	for i := 0; i < len(source); i++ {
    		pSlicesOutputList[i] = c.slicesInputToPSlicesOutput(source[i])
    	}
    	return pSlicesOutputList
    }
    func (c *ConverterImpl) ConvertPToP(source []*execution.Input) []*execution.Output {
    	pSlicesOutputList := make([]*execution.Output, len(source))
    	for i := 0; i < len(source); i++ {
    		var pSlicesOutput *execution.Output
    		if source[i] != nil {
    			slicesOutput := c.slicesInputToSlicesOutput(*source[i])
    			pSlicesOutput = &slicesOutput
    		}
    		pSlicesOutputList[i] = pSlicesOutput
    	}
    	return pSlicesOutputList
    }
    func (c *ConverterImpl) slicesInputToPSlicesOutput(source execution.Input) *execution.Output {
    	slicesOutput := c.slicesInputToSlicesOutput(source)
    	return &slicesOutput
    }
    func (c *ConverterImpl) slicesInputToSlicesOutput(source execution.Input) execution.Output {
    	var slicesOutput execution.Output
    	slicesOutput.Name = source.Name
    	slicesOutput.Age = source.Age
    	return slicesOutput
    }
